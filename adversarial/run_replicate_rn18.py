# This script replicates the original D_rand and D_det experiments from Ilyas et al. (2019)
# It gets much better accuracy on D_rand (likely because we do not force all perturbations to
# reach the maximum radius), and worse on D_det (caused by using the smaller architecture).
# Sample output:
"""
Training clean model...
Acc=1.0000(train),0.9433(test): 100%|███████████████████| 200/200 [07:21<00:00,  2.21s/it]
Clean test accuracy: 0.9433
Generating D_rand...
100%|███████████████████████████████████████████████████| 100/100 [03:45<00:00,  2.26s/it]
Fooling rate: 0.9901
Training on D_rand...
Acc=0.9980(train),0.1117(test): 100%|███████████████████| 200/200 [07:17<00:00,  2.19s/it]
Clean test accuracy: 0.1118
Generating D_det...
100%|███████████████████████████████████████████████████| 100/100 [03:45<00:00,  2.26s/it]
Fooling rate: 0.9881
Training on D_det...
Acc=1.0000(train),0.3465(test): 100%|███████████████████| 200/200 [08:50<00:00,  2.65s/it]
Clean test accuracy: 0.3465
"""
# The following is the result of training ResNet-9 on the D_rand generated by the RN18
"""
Acc=1.0000(train),0.8670(test): 100%|███████████████████| 200/200 [03:36<00:00,  1.08s/it]
Final acc: 0.8670
"""

import os
from tqdm import tqdm
import torch
import torch.nn.functional as F

from loader import CifarLoader
from train_rn18 import train, evaluate
from adversarial import gen_adv_dataset

if __name__ == '__main__':

    os.makedirs('datasets', exist_ok=True)

    train_loader = CifarLoader('cifar10', train=True, batch_size=500, aug=dict(flip=True, translate=4))
    test_loader = CifarLoader('cifar10', train=False)

    print('Training clean model...')
    #model, _ = train(train_loader)
    #print('Clean test accuracy: %.4f' % evaluate(model, test_loader))

    print('Generating D_rand...')
    #loader = gen_adv_dataset(model, dtype='drand', r=0.5, step_size=0.1)
    #loader.save('datasets/replicate_drand.pt')
    train_loader.load('datasets/replicate_drand.pt')
    print('Training on D_rand...')
    model1, _ = train(train_loader)
    print('Clean test accuracy: %.4f' % evaluate(model1, test_loader))
    1/0

    print('Generating D_det...')
    loader = gen_adv_dataset(model, dtype='ddet', r=0.5, step_size=0.1)
    loader.save('datasets/replicate_ddet.pt')
    train_loader.load('datasets/replicate_ddet.pt')
    print('Training on D_det...')
    model1, _ = train(train_loader)
    print('Clean test accuracy: %.4f' % evaluate(model1, test_loader))

